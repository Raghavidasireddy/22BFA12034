from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import RedirectResponse
from pydantic import BaseModel, HttpUrl
from starlette.middleware.base import BaseHTTPMiddleware
from datetime import datetime, timedelta
import uuid

app = FastAPI()

url_db = {}
click_stats = {}

class LoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        response = await call_next(request)
        return response

app.add_middleware(LoggingMiddleware)

class URLRequest(BaseModel):
    url: HttpUrl
    validity: int = 30
    shortcode: str | None = None

class URLResponse(BaseModel):
    shortLink: str
    expiry: str

@app.post("/shorturls", response_model=URLResponse, status_code=201)
def create_short_url(data: URLRequest):
    code = data.shortcode if data.shortcode else str(uuid.uuid4())[:6]

    if code in url_db:
        raise HTTPException(status_code=400, detail="Shortcode already exists")

    expiry = datetime.utcnow() + timedelta(minutes=data.validity)
    url_db[code] = {
        "original": str(data.url),
        "expiry": expiry,
        "created": datetime.utcnow(),
        "clicks": []
    }

    return {
        "shortLink": f"http://localhost:8000/{code}",
        "expiry": expiry.isoformat()
    }

@app.get("/{shortcode}")
def redirect(shortcode: str, request: Request):
    entry = url_db.get(shortcode)

    if not entry or entry["expiry"] < datetime.utcnow():
        raise HTTPException(status_code=404, detail="Invalid or expired shortcode")

    entry["clicks"].append({
        "timestamp": datetime.utcnow().isoformat(),
        "referer": request.headers.get("referer", "unknown")
    })

    return RedirectResponse(url=entry["original"])

@app.get("/shorturls/{shortcode}")
def stats(shortcode: str):
    entry = url_db.get(shortcode)
    if not entry:
        raise HTTPException(status_code=404, detail="Shortcode not found")

    return {
        "click_count": len(entry["clicks"]),
        "original_url": entry["original"],
        "created_at": entry["created"],
        "expiry": entry["expiry"],
        "clicks": entry["clicks"]
    }
